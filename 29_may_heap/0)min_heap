Max_heap in c++

#include <bits/stdc++.h> 
using namespace std; 
  
// Driver code 
int main () 
{ 
    // Creates a max heap 
    priority_queue<int>pq; 
    pq.push(5); 
    pq.push(1); 
    pq.push(10); 
    pq.push(30); 
    pq.push(20); 
  
    // One by one extract items from max heap 
    while (pq.empty() == false) 
    { 
        cout << pq.top() << " "; 
        pq.pop(); 
    } 
    return 0; 
} 
Output
30 20 10 5 1 


Min heap -:
priority_queue <Type, vector<Type>, ComparisonType > min_heap;

#include <bits/stdc++.h> 
using namespace std; 
  
// Driver code 
int main () 
{ 
    // Creates a min heap 
    priority_queue <int, vector<int>, greater<int> > pq; 
    pq.push(5); 
    pq.push(1); 
    pq.push(10); 
    pq.push(30); 
    pq.push(20); 
  
    // One by one extract items from min heap 
    while (pq.empty() == false) 
    { 
        cout << pq.top() << " "; 
        pq.pop(); 
    } 
  
    return 0; 
} 
Output: 

1 5 10 20 30 




Java -:

Min heap -:
import java.util.PriorityQueue;

public class MinHeapExample {
    public static void main(String[] args) {
        PriorityQueue<Integer> minHeap = new PriorityQueue<>();

        // Adding elements to the min heap
        minHeap.add(10);
        minHeap.add(20);
        minHeap.add(15);
        minHeap.add(5);

        // Printing the elements of the min heap
        while (!minHeap.isEmpty()) {
            System.out.println(minHeap.poll()); // removes and prints the smallest element
        }
    }
}




Max heap -:
import java.util.Collections;
import java.util.PriorityQueue;

public class MaxHeapExample {
    public static void main(String[] args) {
        // Create a PriorityQueue with a custom comparator to simulate a max heap
        PriorityQueue<Integer> maxHeap = new PriorityQueue<>(Collections.reverseOrder());

        // Adding elements to the max heap
        maxHeap.add(10);
        maxHeap.add(20);
        maxHeap.add(15);
        maxHeap.add(5);

        // Printing the elements of the max heap
        while (!maxHeap.isEmpty()) {
            System.out.println(maxHeap.poll()); // removes and prints the largest element
        }
    }
}
